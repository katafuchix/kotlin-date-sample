/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package net.deskplate.datesample


import org.threeten.bp.LocalDate
import org.threeten.bp.ZoneOffset
import org.threeten.bp.ZonedDateTime
import org.threeten.bp.format.DateTimeFormatter
import java.text.ParseException
import java.text.SimpleDateFormat
import java.util.*


enum class DateFormat(val pattern: String) {
    SLASH("yyyy/MM/dd HH:mm"),
    ISO_8601("yyyy-MM-dd'T'HH:mm:ss.sssXXX")
}

/**
 * ISO_8601に形式に従ってZonedDateTimeにする
 * @return ZonedDateTime
 */
fun String.toDateISO_8601(): ZonedDateTime {
    return ZonedDateTime.parse(this, DateTimeFormatter.ISO_DATE_TIME)
}

fun ZonedDateTime.toYYYYMMDD(): String {
    val format = "yyyy/MM/dd"
    return this.format(DateTimeFormatter.ofPattern(format))
}

fun String.toZonedDateTime(): ZonedDateTime {
    return if (length == 29) {
        toDateISO_8601()
    } else {
        if (length == 10) {
            val formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd")
            val localDate = LocalDate.parse(this, formatter)
            localDate.atStartOfDay(ZoneOffset.ofHours(+9))
        } else {
            val formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm")
            val localDate = LocalDate.parse(this, formatter)
            localDate.atStartOfDay(ZoneOffset.ofHours(+9))
        }
    }
}


/**
 * 例: 8/21(水)にする
 */
fun ZonedDateTime.toMddE(): String {
    val format = "M/d(E)"
    return this.format(DateTimeFormatter.ofPattern(format))
}

/**
 * HH:mmにする
 * @return String
 */
fun ZonedDateTime.toHHmm(): String {
    val format = "HH:mm"
    return this.format(DateTimeFormatter.ofPattern(format))
}

/**
 * 例: 8/21(水) 01:59にする
 * @return String
 */
fun ZonedDateTime.toMddEHHmm(): String {
    val format = "M/d(E) HH:mm"
    return this.format(DateTimeFormatter.ofPattern(format))
}

/**
 * yyyy年MM月にする
 * @return String
 */
fun LocalDate.toYYYYMM(): String {
    val format = "yyyy年MM月"
    return this.format(DateTimeFormatter.ofPattern(format, Locale.JAPAN))
}

/**
 * 例: 8/21(水)にする
 */
fun LocalDate.toMddE(): String {
    val format = "M/d(E)"
    return this.format(DateTimeFormatter.ofPattern(format, Locale.JAPAN))
}


class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    println(App().greeting)


    println("2022-11-01T01:23:45.000+09:00".toDateISO_8601())
    println("2022-11-01T01:23:45.000+09:00".toDateISO_8601().toYYYYMMDD())
    println("2022-11-01T15:23:45.000+09:00".toDateISO_8601())
    println("2022-11-01T15:23:45.000+09:00".toDateISO_8601().toYYYYMMDD())
    println("2022-11-01T15:23:45.000+09:00".toZonedDateTime())
    println("2022-11-01T15:23:45.000+09:00".toZonedDateTime().toLocalDate())
    println("2022-11-01T15:23:45.000+09:00".toDateISO_8601().toMddE())
    println("2022-11-01T15:23:45.000+09:00".toDateISO_8601().toHHmm())
}
